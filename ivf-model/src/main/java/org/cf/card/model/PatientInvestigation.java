package org.cf.card.model;

import static javax.persistence.GenerationType.AUTO;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * PatientInvestigation generated by hbm2java
 */
@Entity
@Table(name = "patient_investigation")
public class PatientInvestigation implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = AUTO)
	@Column(name = "id", unique = true, nullable = false)
	private Long id;

	// code id oneToOne
	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.MERGE)
	@JoinColumn(name = "code_id", nullable = false)
	private Codes code;

	@Column(name = "bmi")
	private Float bmi;

	@Column(name = "scan", columnDefinition = "LONGTEXT")
	private String scan;

	/*@Column(name = "medical_history",columnDefinition="LONGTEXT")
	private String medicalHistory;

	@Column(name = "nurse_notes", columnDefinition="LONGTEXT")
	private String nurseNotes;

	@Column(name = "biochemstry", columnDefinition="LONGTEXT")
	private String biochemstry;

	@Column(name = "scan", columnDefinition="LONGTEXT")
	private String scan;

	@Column(name = "lab_points", columnDefinition="LONGTEXT")
	private String labPoints;*/

	// @JsonIgnore
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "patientInvestigation", cascade = CascadeType.ALL)
	private List<InvestigatinValue> investigatinValues = new ArrayList<InvestigatinValue>();

	@JsonIgnore
	@ManyToOne
	@JoinColumn(name = "nurse_id")
	private User nurse;

	public PatientInvestigation() {
	}

	public PatientInvestigation(Codes code, Float bmi, String medicalHistory, String nurseNotes, String biochemstry,
			String scan, String labPoints, List<InvestigatinValue> investigatinValues) {
		this.code = code;
		this.bmi = bmi;
	/*	this.medicalHistory = medicalHistory;
		this.nurseNotes = nurseNotes;
		this.biochemstry = biochemstry;
		this.scan = scan;
		this.labPoints = labPoints;*/
		this.investigatinValues = investigatinValues;

	}

	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Codes getCode() {
		return code;
	}

	public void setCode(Codes code) {
		this.code = code;
	}

	public Float getBmi() {
		return this.bmi;
	}

	public void setBmi(Float bmi) {
		this.bmi = bmi;
	}



	/*public String getMedicalHistory() {
		return this.medicalHistory;
	}

	public void setMedicalHistory(String medicalHistory) {
		this.medicalHistory = medicalHistory;
	}

	public String getNurseNotes() {
		return this.nurseNotes;
	}

	public void setNurseNotes(String nurseNotes) {
		this.nurseNotes = nurseNotes;
	}

	public String getBiochemstry() {
		return this.biochemstry;
	}

	public void setBiochemstry(String biochemstry) {
		this.biochemstry = biochemstry;
	}

	public String getScan() {
		return this.scan;
	}

	public void setScan(String scan) {
		this.scan = scan;
	}

	public String getLabPoints() {
		return labPoints;
	}

	public void setLabPoints(String labPoints) {
		this.labPoints = labPoints;
	}*/



	public User getNurse() {
		return nurse;
	}

	public void setNurse(User nurse) {
		this.nurse = nurse;
	}

	public String getScan() {
		return scan;
	}

	public void setScan(String scan) {
		this.scan = scan;
	}

	public List<InvestigatinValue> getInvestigatinValues() {
		return this.investigatinValues;
	}

	public void setInvestigatinValues(List<InvestigatinValue> investigatinValues) {
		this.investigatinValues = investigatinValues;
	}

	/*
	 * @Override public int hashCode() { final int prime = 31; int result = 1;
	 * result = prime * result + ((biochemstry == null) ? 0 :
	 * biochemstry.hashCode()); result = prime * result + ((bmi == null) ? 0 :
	 * bmi.hashCode()); result = prime * result + ((client == null) ? 0 :
	 * client.hashCode()); result = prime * result + ((id == null) ? 0 :
	 * id.hashCode()); result = prime * result + ((medicalHistory == null) ? 0 :
	 * medicalHistory.hashCode()); result = prime * result + ((nurseNotes ==
	 * null) ? 0 : nurseNotes.hashCode()); result = prime * result + ((scan ==
	 * null) ? 0 : scan.hashCode()); result = prime * result + ((treatment ==
	 * null) ? 0 : treatment.hashCode()); return result; }
	 *
	 * @Override public boolean equals(Object obj) { if (this == obj) return
	 * true; if (obj == null) return false; if (getClass() != obj.getClass())
	 * return false; PatientInvestigation other = (PatientInvestigation) obj; if
	 * (biochemstry == null) { if (other.biochemstry != null) return false; }
	 * else if (!biochemstry.equals(other.biochemstry)) return false; if (bmi ==
	 * null) { if (other.bmi != null) return false; } else if
	 * (!bmi.equals(other.bmi)) return false; if (client == null) { if
	 * (other.client != null) return false; } else if
	 * (!client.equals(other.client)) return false; if (id == null) { if
	 * (other.id != null) return false; } else if (!id.equals(other.id)) return
	 * false; if (investigatinValues == null) { if (other.investigatinValues !=
	 * null) return false; } else if
	 * (!investigatinValues.equals(other.investigatinValues)) return false; if
	 * (medicalHistory == null) { if (other.medicalHistory != null) return
	 * false; } else if (!medicalHistory.equals(other.medicalHistory)) return
	 * false; if (nurseNotes == null) { if (other.nurseNotes != null) return
	 * false; } else if (!nurseNotes.equals(other.nurseNotes)) return false; if
	 * (remarks == null) { if (other.remarks != null) return false; } else if
	 * (!remarks.equals(other.remarks)) return false; if (scan == null) { if
	 * (other.scan != null) return false; } else if (!scan.equals(other.scan))
	 * return false; if (treatment == null) { if (other.treatment != null)
	 * return false; } else if (!treatment.equals(other.treatment)) return
	 * false; return true; }
	 *
	 * @Override public String toString() { return "PatientInvestigation [id=" +
	 * id + ", client=" + client + ", treatment=" + treatment + ", bmi=" + bmi +
	 * ", medicalHistory=" + medicalHistory + ", nurseNotes=" + nurseNotes +
	 * ", biochemstry=" + biochemstry + ", scan=" + scan + ", remarks=" +
	 * remarks + ", investigatinValues=" + investigatinValues + "]"; }
	 *
	 */
}
